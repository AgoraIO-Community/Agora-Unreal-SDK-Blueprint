//  Copyright (c) 2019 Agora.io. All rights reserved.

#pragma once

#if PLATFORM_WINDOWS

#include "CoreMinimal.h"

#if PLATFORM_WINDOWS
#include "Windows/AllowWindowsPlatformTypes.h"
#endif
#include <Agora/IAgoraLiveEngine.h>
#if PLATFORM_WINDOWS
#include "Windows/HideWindowsPlatformTypes.h"
#endif

namespace agora
{
namespace rtc
{
namespace ue4
{

class AgoraRtcEngine;

/**
 * Wrapper around agora::rtc::ILiveEngine
 */
class AGORAPLUGIN_API AgoraLiveEngine
{
public:
	AgoraLiveEngine() = delete;
	AgoraLiveEngine(const AgoraLiveEngine& other);
	AgoraLiveEngine(AgoraLiveEngine&& other) noexcept;
	AgoraLiveEngine& operator=(const AgoraLiveEngine& other);
	AgoraLiveEngine& operator=(AgoraLiveEngine&& other) noexcept;
	~AgoraLiveEngine();

public:
   /**
   * @brief          Creates the AgoraLiveEngine object
   * @return
   *                 -  Success: Returns a pointer to the AgoraLiveEngine object
   *                 -  Failure: Returns nullptr.
   */
	static AgoraLiveEngine* createAgoraLiveEngine();

public:
   /** 
   * @brief          Initializes the RTC engine.
   * @param          appId 
   *                 RTC engine context
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
   */
	int initialize(const char* appId);

   /** 
   * @brief          Retrieves the SDK version.
   * @param          build 
   *                 Build number
   * @return         The current SDK version in the sting format. For example, 2.3.0
   */
	const char* getVersion(int* build);

   /*
	* @brief          Gets a pointer to RtcEngine instance.
   * @return         Pointer to AgoraRtcEngine
	*/
	AgoraRtcEngine* getRtcEngine();

   /**
	* @brief          Sets the event handler for ILiveEngine.
   * @param          eventHandler
   *                 An event callback interface instance.
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
	*/
	int setEventHandler(agora::rtc::ILiveEngineEventHandler* eventHandler);

   /**
	* @brief          Allows a useer to join the channel. If a channel has not been created, it will been created automatically.
	* @brief          Users in the same channel can talk to each other, and multiple users in the same channel can start a group chat. 
   *                 Users with different App IDs cannot call each other.
   * @brief          You must call the \ref leaveChannel method to exit the current call before entering another channel.
   * @brief          A successful joinChannel method call triggers the following callbacks:
   *                 - The local client: onJoinChannelSuccess
   *                 - The remote client: onUserJoined , if the user joining the channel is in the Communication profile, or is a BROADCASTER in the Live Broadcast profile.
   * @brief          When the connection between the client and Agora's server is interrupted due to poor network conditions, the SDK tries reconnecting to the server. 
   *                 When the local client successfully rejoins the channel, the SDK triggers the onRejoinChannelSuccess callback on the local client.
	* @note           A channel does not accept duplicate uids, such as two users with the same uid. If you set uid as 0, the system will assign a uid.
   * @warning        Ensure that the App ID used for creating the token is the same App ID used by the initialize method for initializing the RTC engine. 
   *                 Otherwise, the CDN live streaming may fail.
   * @param          token 
   *                 Pointer to the token generated by the application server. In most circumstances, a static App ID suffices. For added security, use a Channel Key.
   *                 - If you initialized the engine with an available App ID, set token as null.
   *                 - If you enabled the Token in Dashboard, set it here.
   * @param          channelId 
   *                 Pointer to the unique channel name for the Agora RTC session in the string format smaller than 64 bytes.
   * @param          config 
   *                 Channel configuration: LiveChannelConfig
   * @param          uid User ID. If uid is set to 0, the system will assign a uid.
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
	*/
	int joinChannel(const char* token, const char* channelId, agora::rtc::LiveChannelConfig* config, agora::rtc::uid_t uid);

   /**
   * @brief          Allows a user to leave a channel, such as hanging up or exiting a call.
   * @brief          After joining a channel, the user must call the leaveChannel method to end the call before joining another channel.
   * @brief          This method returns 0 if the user leaves the channel and releases all resources related to the call.
   * @brief          This method call is asynchronous, and the user has not left the channel when the method call returns.
   *                 Once the user leaves the channel, the SDK triggers the onLeaveChannel callback.
   *                 A successful leaveChannel method call triggers the following callbacks:
   *                 - The local client: onLeaveChannel
   *                 - The remote client: onUserOffline , if the user leaving the channel is in the Communication channel, or is a BROADCASTER in the Live Broadcast profile.
   * @note           \arg If you call the release method immediately after the leaveChannel method, the leaveChannel process interrupts, and the onLeaveChannel callback is not triggered.
   * @note           \arg If you call the leaveChannel method during a CDN live streaming, the SDK triggers the removePublishStreamUrl method.               
   *                 
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
   */
	int leaveChannel();

   /** 
   * @brief          Gets a new token when the current token expires after a period of time.
   * @brief          The token expires after a period of time once the token schema is enabled when:
   *                 - The SDK triggers the \ref onTokenPrivilegeWillExpire callback, or
   *                 - The \ref onConnectionStateChanged reports CONNECTION_CHANGED_TOKEN_EXPIRED(9).
   * @param          token 
   *                 Pointer to the new token.
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
   */
	int renewToken(const char* token);

   /** 
   * @brief          Starts the local video preview before joining the channel.
   * @brief          Before calling this method, you must:
   *                 - Call the \ref setupLocalVideo method to set up the local preview window and configure the attributes.
   *                 - Call the \ref enableVideo method to enable video.
   * @note           Once the \ref startPreview method is called to start the local video preview, if you leave the channel by calling the \ref leaveChannel method,
   *                 the local video preview remains until you call the \ref stopPreview method to disable it.
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
   */
	int startPreview(agora::rtc::view_t view, agora::rtc::RENDER_MODE_TYPE type);

   /** 
   * @brief          Stops the local video preview and disables video.
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
   */
	int stopPreview();

   /** 
   * @brief          Determines whether the release will be called synchronously or asynchronously
   * @param          sync
   *                 - true: Synchronous call
   *                 - false: Asynchronous call
   * @return
   *                 - 0: Success.
   *                 - < 0: Failure.
   */
	void setSyncForRelease(bool sync);

public:
	friend class AgoraPublisherEngine;
	friend class AgoraSubscriberEngine;

private:
   /**
   * @brief Releases all LiveEngine resources.
   */
	void release(bool sync = false);

private:
	AgoraLiveEngine(agora::rtc::ILiveEngine* liveEngine);

private:
	agora::rtc::ILiveEngine* m_liveEngine = nullptr;
	bool m_sync = false;
};

}
}
}
#endif
